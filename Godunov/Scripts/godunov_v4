import numpy as np
import matplotlib.pyplot as plt

# Parameters
g = 9.81
f = 0.05
A_L = 3
V = 5000
mean = 0
sigma = 10
shape = 'Wedge'

# Spatial and temporal resolution
L = 50
N_s = 20
N_t = 100
s = np.linspace(-L, L, N_s)
t = np.linspace(0, 10, N_t)
ds = s[1] - s[0]
dt = t[1] - t[0]

# Geometry functions
def l(A):
    if shape == 'Rectangle':
        w = 10
        return w + ((2 * A) / w)
    
    if shape == 'Wedge':
        theta = np.pi / 6
        return np.sqrt((8 * A) / (np.sin(theta)))
    
    if shape == 'Semi':
        theta = np.pi/3
        
        return np.sqrt((2 * A) / (theta - np.sin(theta))) * theta

    if shape == 'Parabola':
        w = 10
        
        var_0 = (3 * A) / (2 * (w ** 2))
        
        return ((2 * (w ** 3))/(3 * A)) * (var_0 * np.sqrt(1 + (var_0 ** 2)) + np.log(np.abs(np.sqrt(1 + (var_0 ** 2)) + var_0))) 

def u_bar(A):
    alpha = np.arctan(0.08)
    return np.sqrt((g * np.sin(alpha) * A) / (f * l(A)))

def Q(A):
    return A * u_bar(A)

# Initial condition
def initial_condition(s):
    norm = np.sqrt(2 * np.pi * sigma**2)
    return (V / norm) * np.exp(-((s - mean)**2) / (2 * sigma**2)) + A_L

# Initialize solution array
A = np.zeros((N_t, N_s))
A[0, :] = initial_condition(s)

# Upwind scheme for convection equation
for n in range(N_t - 1):
    for i in range(1, N_s):
        c = u_bar(A[n, i])
        if c > 0:
            A[n + 1, i] = A[n, i] - dt / ds * c * (A[n, i] - A[n, i - 1])
        else:
            A[n + 1, i] = A[n, i] - dt / ds * c * (A[n, i + 1] - A[n, i])

# Plot the results
plt.figure(figsize=(10, 6))
for n in range(0, N_t, N_t // 10):
    plt.plot(s, A[n, :], label=f't={t[n]:.1f}s')

#plt.xlim(0, sigma + mean)
plt.xlabel('x')
plt.ylabel('A')
plt.legend()
plt.grid()
plt.show()
